#!/bin/bash

SCRIPT="$0"

while [ -h "$SCRIPT" ] ; do
  ls=`ls -ld "$SCRIPT"`
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '/.*' > /dev/null; then
    SCRIPT="$link"
  else
    SCRIPT=`dirname "$SCRIPT"`/"$link"
  fi
done

MARID_HOME=`dirname "$SCRIPT"`
MARID_HOME=`cd "$MARID_HOME"; pwd`

if [ "$JAVA_HOME" = "" ]; then
	echo "JAVA_HOME is not defined."
	exit 0
fi

if [ ! -f "$JAVA_HOME/bin/java" ]; then
	echo "java executable doesn't exists."
	exit 0
fi

KILL_TIMEOUT=120

# JAVA_OPTS=" -Dcom.sun.management.jmxremote.port=12223 $JAVA_OPTS"
# JAVA_OPTS=" -Dcom.sun.management.jmxremote.authenticate=false $JAVA_OPTS"
# JAVA_OPTS=" -Dcom.sun.management.jmxremote.ssl=false $JAVA_OPTS"
# JAVA_OPTS=" -Duser.language=en $JAVA_OPTS"

JAVA_OPTS=" -Dmarid.conf.path=$MARID_HOME/../conf/opsgenie-integration.conf $JAVA_OPTS"
JAVA_OPTS=" -Dmarid.log.conf.path=$MARID_HOME/conf/log.properties $JAVA_OPTS"
JAVA_OPTS=" -Dmarid.scripts.dir=$MARID_HOME/scripts $JAVA_OPTS"
JAVA_OPTS=" -Dmarid.logs.dir=$MARID_HOME/logs $JAVA_OPTS"
# JAVA_OPTS=" -Xms256m $JAVA_OPTS"
JAVA_OPTS=" -Xmx512m $JAVA_OPTS"
JAVA_OPTS=" -XX:MaxPermSize=128m $JAVA_OPTS"
JAVA_OPTS=" -XX:+HeapDumpOnOutOfMemoryError $JAVA_OPTS"
JAVA_OPTS=" -server $JAVA_OPTS"

#JAVA_OPTS=" -Xdebug $JAVA_OPTS"
#JAVA_OPTS=" -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=17777 $JAVA_OPTS"

CLASSPATH=$CLASSPATH:$MARID_HOME/lib/*

PIDDIR=$MARID_HOME/pids  ##pid directory
PIDFILE=$PIDDIR/maridpid ##pid file

pid=""

start() {
 #
 # check to see whether pid directory exists
 #
 if [ ! -d $PIDDIR ]
 then
   `mkdir $PIDDIR`
 fi

 getpid
  if [ "X$pid" = "X" ]
     then
     rm -f $MARID_HOME/logs/Out.log
     rm -f $MARID_HOME/logs/Err.log
     if [ ! -d $MARID_HOME/logs ]
      then
       mkdir $MARID_HOME/logs
      fi
   	##starts the service
   	exec $JAVA_HOME/bin/java $JAVA_OPTS -cp $CLASSPATH com.ifountain.opsgenie.client.marid.Bootstrap > $MARID_HOME/logs/Out.log  2> $MARID_HOME/logs/Err.log &
   	echo $! >> $PIDFILE
 else
  echo "AlreadyRunning"
 fi
}

stop(){
 if test -d $PIDDIR
 then
  if test -f $PIDFILE
  then
   PID=`/bin/cat $PIDFILE`
  else
   echo "Error : Process ID file deleted OR service is not running"
   exit
  fi
 else
  echo "Error : Unable to open process id directory"
  exit
 fi

 cycle_kill $PID
 rm -f $PIDFILE
}

cycle_kill()
{
  processId=$1
  returnValue=0
  kill -HUP $processId
  stopped=0;
  for (( i=0 ;  i<KILL_TIMEOUT ;  i++ ))
  do
    foundPid=`ps -p $processId | grep $processId | grep -v grep | awk '{print $1}' | tail -1`
    if [ "X$foundPid" = "X$processId" ]
    then
      sleep 1
    else
      stopped=1
      break
    fi
  done
  if [ $stopped -eq 0 ]
  then
    kill -9 $processId
  fi
}

getpid(){

 if [ -f $PIDFILE ]
 then
  if [ -r $PIDFILE ]
  then
   pid=`cat $PIDFILE`
   if [ "X$pid" != "X" ]
   then

    # Verify that a process with this pid is still running.
    pid=`ps -p $pid | grep $pid | grep -v grep | awk '{print $1}' | tail -1`

    if [ "X$pid" = "X" ]
    then
     # This is a stale pid file.
     rm -f $PIDFILE
     #echo "Removed stale pid file: $PIDFILE"
    fi
   fi
   else
    echo "Error : Cannot read $PIDFILE."
   exit 1
  fi
 fi

}
status(){
 getpid
 if [ "X$pid" = "X" ]
     then
         echo "NotRunning"
          exit 1
    else
         echo "Running ($pid)"
         exit 0
     fi
}
case "$1" in

     'start')
      start
  ;;

     'stop')
         stop
  ;;
 'restart')
  stop
  start
  ;;
 'status')
  status
  ;;

    *)
        echo "usage :: $SCRIPT start | stop "
        exit 1
        ;;
esac
