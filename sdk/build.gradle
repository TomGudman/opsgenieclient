buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.0'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'

dependencies {
    compile 'org.apache.httpcomponents:httpcore:4.2.5'
    compile 'org.apache.httpcomponents:httpmime:4.2.5'
    compile 'org.apache.httpcomponents:httpclient:4.2.5'
    compile 'org.codehaus.jackson:jackson-mapper-lgpl:1.9.3'

    testCompile project(':test')
}

tasks.check.dependsOn 'shadowJar'

shadowJar {
    relocate 'org.apache', 'com.ifountain.apache'
    relocate 'org.codehaus', 'com.ifountain.codehaus'
}

jar {
    manifest {
        attributes("Built-By": "http://www.opsgenie.com",
                "Specification-Title": "OpsGenie Java SDK",
                "Specification-Product": "opsgenie-java-sdk",
                "Specification-Version": project.version,
                "Specification-Vendor": "http://www.opsgenie.com",
                "Implementation-Title" : "OpsGenie Java SDK",
                "Implementation-Product": "opsgenie-java-sdk",
                "Implementation-Vendor":"http://www.opsgenie.com",
                "Implementation-Version":project.version,
        )
    }
}

task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: 'javadoc') {
    classifier 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

uploadArchives {
    def uploadOptions = file("${rootProject.buildDir}/uploadOptions.properties")

    if(!uploadOptions.exists()) {
        if(project.hasProperty("options")) {
            uploadOptions = file(project.options)
            if(!uploadOptions.exists()) {
                println "[Uploading NEXUS] Options file does not exist. Skipping!"
                return;
            }
        } else {
            return
        }
    }

    def type = project.version.toString().contains("SNAPSHOT") ? 'snapshots' : 'releases'
    def url = "http://repo.opsgenie.com:9393/content/repositories/${type}"
    def props = new Properties();
    props.load(new FileInputStream(uploadOptions))
    def nexusUser = props.getProperty('nexusUser')
    def nexusPassword = props.getProperty('nexusPassword')
    repositories {
        mavenDeployer {
            repository(url: url) {
                authentication(userName: nexusUser, password: nexusPassword)
            }
        }
    }
}

